# Generated by Django 4.2.5 on 2025-06-12 08:11

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import expert_marketplace.models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(default="", max_length=100)),
                ("email", models.EmailField(default="", max_length=254)),
                ("phone", models.CharField(blank=True, default="", max_length=20)),
                (
                    "description",
                    models.TextField(
                        default="",
                        help_text="Brief description of what the user needs help with.",
                    ),
                ),
                ("scheduled_date", models.DateField(blank=True, null=True)),
                ("scheduled_time", models.TimeField(blank=True, null=True)),
                (
                    "duration_minutes",
                    models.IntegerField(
                        default=30,
                        validators=[django.core.validators.MinValueValidator(15)],
                    ),
                ),
                (
                    "consultation_fee",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default=expert_marketplace.models.get_default_currency,
                        max_length=3,
                    ),
                ),
                (
                    "expertise_needed",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("tech", "Tech"),
                            ("business", "Business"),
                            ("academic", "Academic"),
                            ("arts", "Arts"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "additional_notes",
                    models.TextField(
                        blank=True,
                        help_text="Any other details for the expert or admin.",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending_payment", "Pending Payment"),
                            ("awaiting_assignment", "Awaiting Expert Assignment"),
                            ("confirmed", "Confirmed"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("refunded", "Refunded"),
                            ("partially_refunded", "Partially Refunded"),
                            ("expert_noshow", "Expert No-Show"),
                            ("client_noshow", "Client No-Show"),
                            ("dispute", "Dispute"),
                        ],
                        default="pending_payment",
                        max_length=20,
                    ),
                ),
                (
                    "stripe_payment_intent_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "stripe_charge_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "stripe_refund_id",
                    models.CharField(
                        blank=True,
                        help_text="Stores the ID of the latest Stripe refund object.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "refund_processed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp when the last refund was processed via Stripe.",
                        null=True,
                    ),
                ),
                (
                    "platform_fee",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "expert_earnings",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "refund_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "expert_response_deadline",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("assigned_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("completion_notes", models.TextField(blank=True, null=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("cancellation_reason", models.TextField(blank=True, null=True)),
                (
                    "cancelled_by",
                    models.CharField(
                        blank=True,
                        help_text="Indicates who initiated the cancellation (e.g., 'client', 'expert', 'system', 'admin')",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("meeting_link", models.URLField(blank=True, null=True)),
                ("reschedule_count", models.PositiveIntegerField(default=0)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Expert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                (
                    "email",
                    models.EmailField(
                        help_text="Expert's primary email, used for login.",
                        max_length=254,
                        unique=True,
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        help_text="Hashed password for expert login. Use 'set_password' to set it.",
                        max_length=128,
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "expertise",
                    models.CharField(
                        choices=[
                            ("tech", "Tech"),
                            ("business", "Business"),
                            ("academic", "Academic"),
                            ("arts", "Arts"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "specialization",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("bio", models.TextField(blank=True, null=True)),
                ("hourly_rate", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "profile_image",
                    models.ImageField(blank=True, null=True, upload_to="experts/"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this expert can log in and is considered active.",
                    ),
                ),
                (
                    "rating",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                ("last_assigned_at", models.DateTimeField(blank=True, null=True)),
                ("availability_json", models.TextField(blank=True, default="[]")),
                (
                    "tier",
                    models.CharField(
                        choices=[
                            ("bronze", "Bronze"),
                            ("silver", "Silver"),
                            ("gold", "Gold"),
                            ("platinum", "Platinum"),
                        ],
                        default="bronze",
                        max_length=20,
                    ),
                ),
                (
                    "commission_rate",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.40"), max_digits=5
                    ),
                ),
                (
                    "total_earnings",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "pending_payout",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                ("lifetime_consultations", models.PositiveIntegerField(default=0)),
                ("monthly_consultations", models.PositiveIntegerField(default=0)),
                ("last_month_reset", models.DateField(blank=True, null=True)),
                (
                    "total_earnings_paid",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "stripe_account_id",
                    models.CharField(
                        blank=True,
                        help_text="Stripe Connected Account ID for payouts (e.g., acct_xxxxxxxxxxxxxx)",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "stripe_details_submitted",
                    models.BooleanField(
                        default=False,
                        help_text="Reflects if the expert has submitted all required details to Stripe.",
                    ),
                ),
                (
                    "stripe_charges_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Reflects if charges are enabled for the Stripe account (less critical for payouts).",
                    ),
                ),
                (
                    "stripe_payouts_enabled_status",
                    models.BooleanField(
                        default=False,
                        help_text="Reflects if payouts are enabled for the Stripe account. True if payouts_enabled.",
                    ),
                ),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="expert_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NoShowDispute",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dispute_type",
                    models.CharField(
                        choices=[
                            ("expert_noshow", "Expert No-Show (Reported by Client)"),
                            ("client_noshow", "Client No-Show (Reported by Expert)"),
                            ("quality", "Quality Issue"),
                            ("technical", "Technical Issue"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=20,
                    ),
                ),
                ("reason", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("expert_responded", "Expert Responded"),
                            ("investigating", "Investigating"),
                            ("resolved", "Resolved"),
                            ("rejected", "Rejected"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("client_name", models.CharField(blank=True, max_length=255)),
                ("client_email", models.EmailField(blank=True, max_length=254)),
                ("expert_name", models.CharField(blank=True, max_length=255)),
                ("expert_email", models.EmailField(blank=True, max_length=254)),
                ("reported_at", models.DateTimeField(auto_now_add=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("expert_response", models.TextField(blank=True, null=True)),
                ("expert_response_at", models.DateTimeField(blank=True, null=True)),
                (
                    "expert_evidence_file",
                    models.FileField(
                        blank=True, null=True, upload_to="dispute_evidence/"
                    ),
                ),
                ("resolution_notes", models.TextField(blank=True, null=True)),
                (
                    "refund_amount_decided",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("refund_processed_for_dispute", models.BooleanField(default=False)),
                (
                    "dispute_code",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="disputes",
                        to="expert_marketplace.booking",
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Admin user who resolved the dispute.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_disputes_by_admin",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExpertEarning",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "currency",
                    models.CharField(
                        default=expert_marketplace.models.get_default_currency,
                        max_length=3,
                    ),
                ),
                (
                    "platform_fee_recorded",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Payout"),
                            ("paid", "Paid Out"),
                            ("failed", "Payout Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "calculated_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this earning was calculated and recorded.",
                    ),
                ),
                (
                    "paid_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp when payout was successfully processed.",
                        null=True,
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        blank=True,
                        help_text="Method used for payout (e.g., stripe_transfer, paypal)",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "transaction_id",
                    models.CharField(
                        blank=True,
                        help_text="Stripe Transfer ID or other payment processor transaction ID",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes, e.g., error messages for failed payouts, reasons for cancellation.",
                        null=True,
                    ),
                ),
                (
                    "booking",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="expert_earning_record",
                        to="expert_marketplace.booking",
                    ),
                ),
                (
                    "expert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="all_earnings_records",
                        to="expert_marketplace.expert",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExpertBonus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "currency",
                    models.CharField(
                        default=expert_marketplace.models.get_default_currency,
                        max_length=3,
                    ),
                ),
                ("reason", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Payout"),
                            ("paid", "Paid Out"),
                            ("failed", "Payout Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("paid_at", models.DateTimeField(blank=True, null=True)),
                (
                    "payment_method",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "transaction_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "expert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bonuses",
                        to="expert_marketplace.expert",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Consultation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scheduled_start_time", models.DateTimeField(blank=True, null=True)),
                ("actual_start_time", models.DateTimeField(blank=True, null=True)),
                ("actual_end_time", models.DateTimeField(blank=True, null=True)),
                (
                    "duration_minutes",
                    models.IntegerField(
                        blank=True, help_text="Planned duration in minutes", null=True
                    ),
                ),
                (
                    "actual_duration_minutes",
                    models.IntegerField(
                        blank=True, help_text="Actual duration in minutes", null=True
                    ),
                ),
                (
                    "consultation_type",
                    models.CharField(
                        choices=[
                            ("video", "Video Call"),
                            ("audio", "Audio Call"),
                            ("chat", "Chat"),
                        ],
                        default="video",
                        max_length=10,
                    ),
                ),
                ("notes_by_expert", models.TextField(blank=True, null=True)),
                ("notes_by_client", models.TextField(blank=True, null=True)),
                (
                    "client_rating_for_expert",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("client_review_for_expert", models.TextField(blank=True, null=True)),
                (
                    "expert_rating_for_client",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("expert_feedback_on_client", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("no_show_client", "Client No-Show"),
                            ("no_show_expert", "Expert No-Show"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "booking",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="consultation_record",
                        to="expert_marketplace.booking",
                    ),
                ),
                (
                    "expert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="expert_consultations",
                        to="expert_marketplace.expert",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="client_consultations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="booking",
            name="expert",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="bookings",
                to="expert_marketplace.expert",
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="expert_bookings",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
    ]
