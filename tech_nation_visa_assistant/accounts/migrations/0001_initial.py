# Generated by Django 4.2.5 on 2025-06-12 08:11

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "account_type",
                    models.CharField(
                        choices=[
                            ("free", "Free"),
                            ("pay_once", "Pay Once"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                        ],
                        default="free",
                        max_length=20,
                    ),
                ),
                (
                    "application_stage",
                    models.CharField(
                        choices=[
                            ("assessment", "Initial Assessment"),
                            ("preparation", "Document Preparation"),
                            ("review", "Application Review"),
                            ("submission", "Submission Stage"),
                            ("post_submission", "Post Submission"),
                        ],
                        default="assessment",
                        max_length=20,
                    ),
                ),
                (
                    "visa_path",
                    models.CharField(
                        choices=[
                            ("talent", "Exceptional Talent"),
                            ("promise", "Exceptional Promise"),
                            ("undecided", "Undecided"),
                        ],
                        default="undecided",
                        max_length=20,
                    ),
                ),
                ("is_technical", models.BooleanField(default=False)),
                ("is_business", models.BooleanField(default=False)),
                ("years_experience", models.IntegerField(default=0)),
                ("subscription_active", models.BooleanField(default=False)),
                ("subscription_end_date", models.DateTimeField(blank=True, null=True)),
                ("notify_guide_changes", models.BooleanField(default=True)),
                ("notify_app_updates", models.BooleanField(default=True)),
                ("has_recognition", models.BooleanField(default=False)),
                ("has_innovation", models.BooleanField(default=False)),
                ("has_contribution", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "current_country",
                    django_countries.fields.CountryField(
                        blank=True, max_length=2, null=True
                    ),
                ),
                (
                    "target_uk_region",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("london", "London"),
                            ("south_east", "South East"),
                            ("south_west", "South West"),
                            ("east_england", "East of England"),
                            ("west_midlands", "West Midlands"),
                            ("east_midlands", "East Midlands"),
                            ("yorkshire", "Yorkshire and the Humber"),
                            ("north_west", "North West"),
                            ("north_east", "North East"),
                            ("wales", "Wales"),
                            ("scotland", "Scotland"),
                            ("northern_ireland", "Northern Ireland"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                ("tech_specializations", models.JSONField(blank=True, default=list)),
                ("github_profile", models.URLField(blank=True, null=True)),
                ("linkedin_profile", models.URLField(blank=True, null=True)),
                ("portfolio_website", models.URLField(blank=True, null=True)),
                ("assessment_completed", models.BooleanField(default=False)),
                ("documents_completed", models.BooleanField(default=False)),
                ("document_status", models.JSONField(blank=True, default=dict)),
                ("expert_review_completed", models.BooleanField(default=False)),
                ("application_submitted", models.BooleanField(default=False)),
                ("ai_queries_used", models.IntegerField(default=0)),
                ("ai_queries_limit", models.IntegerField(default=5)),
                ("consultation_credits", models.IntegerField(default=0)),
                ("lifetime_points", models.IntegerField(default=0)),
                ("total_referrals", models.IntegerField(default=0)),
                ("successful_referrals", models.IntegerField(default=0)),
                ("is_paid_user", models.BooleanField(default=False)),
                (
                    "available_free_uses",
                    models.IntegerField(
                        default=0,
                        help_text="Number of free feature uses earned from referrals.",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ContactMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254)),
                ("subject", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("in_progress", "In Progress"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                        ],
                        default="new",
                        max_length=20,
                    ),
                ),
                ("admin_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Contact Message",
                "verbose_name_plural": "Contact Messages",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AIConversation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("query", models.TextField()),
                ("response", models.TextField()),
                ("category", models.CharField(blank=True, max_length=50)),
                ("feedback_helpful", models.BooleanField(null=True)),
                ("user_feedback", models.TextField(blank=True)),
                ("conversation_context", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_conversations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("document", "Document"),
                            ("ai", "AI Assistant"),
                            ("assessment", "Assessment"),
                            ("expert", "Expert Session"),
                            ("notification", "Notification"),
                            ("referral_reward", "Referral Reward"),
                            ("points_awarded", "Points Awarded"),
                            ("free_use_awarded", "Free Use Awarded"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.CharField(max_length=255)),
                ("related_object_id", models.IntegerField(blank=True, null=True)),
                (
                    "related_object_type",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Activities",
                "ordering": ["-created_at"],
            },
        ),
    ]
